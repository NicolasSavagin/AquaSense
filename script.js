let speciesDB = [];

// Carrega o banco de dados de esp√©cies
async function loadSpeciesDB() {
    try {
        const response = await fetch('species.json'); // Caminho para o seu arquivo JSON
        speciesDB = await response.json();
    } catch (error) {
        console.error("Erro ao carregar o banco de dados de esp√©cies:", error);
    }
}

let currentChart = null; // Vari√°vel para armazenar o gr√°fico atual

// Fun√ß√£o para abrir o gr√°fico de pH
function openPHGraphModal(aquariumIndex) {
    const modal = document.getElementById('phGraphModal');
    modal.style.display = "block"; // Exibe o modal

    // Atualiza o gr√°fico para as √∫ltimas 24 horas por padr√£o
    updateGraphData(aquariumIndex, 1); // Passa o aquariumIndex para updateGraphData
}
// Fun√ß√£o para atualizar os dados do gr√°fico
function updateGraphData(aquariumIndex, days = 1) {
    const aquarium = aquariums[aquariumIndex];
    const canvas = document.getElementById('phGraphCanvas');
    const ctx = canvas.getContext('2d');

    // Atualiza o t√≠tulo do modal com base no intervalo de tempo
    const modalTitle = document.querySelector('#phGraphModal h2');
    let title = "Gr√°fico de pH - √öltimas 24 Horas";
    
    switch (days) {
        case 3:
            title = "Gr√°fico de pH - √öltimos 3 Dias";
            break;
        case 7:
            title = "Gr√°fico de pH - √öltimos 7 Dias";
            break;
        case 14:
            title = "Gr√°fico de pH - √öltimos 14 Dias";
            break;
        case 30:
            title = "Gr√°fico de pH - √öltimos 30 Dias";
            break;
    }

    // Atualiza o t√≠tulo no modal
    modalTitle.textContent = title;

    // Gerar dados simulados de pH com base no intervalo de tempo selecionado
    const timeLabels = [];
    const phData = [];
    const currentTime = new Date(); // Hora atual
    const timeSpan = days * 24; // Convertendo dias para horas

    for (let i = 0; i < timeSpan; i++) {
        const hour = new Date(currentTime);
        hour.setHours(currentTime.getHours() - (timeSpan - i)); // Definindo as horas de acordo com o intervalo
        timeLabels.push(hour.toLocaleDateString() + ' ' + hour.toLocaleTimeString()); // Formata a data e hora

        // Simula uma leitura de pH, fazendo uma varia√ß√£o em torno do valor do pH do aqu√°rio
        const fluctuation = Math.random() * 0.5 - 0.25; // Flutua√ß√£o do pH entre -0.25 e +0.25
        phData.push(aquarium.currentPH + fluctuation); // Simula√ß√£o de flutua√ß√£o do pH
    }

    // Se j√° houver um gr√°fico anterior, destru√≠mos ele para recriar com novos dados
    if (currentChart) {
        currentChart.destroy();
    }

    // Configura√ß√£o do gr√°fico
    currentChart = new Chart(ctx, {
        type: 'line', 
        data: {
            labels: timeLabels, // Hor√°rios
            datasets: [{
                label: 'pH do Aqu√°rio',
                data: phData,
                borderColor: 'rgba(255, 99, 132, 1)', // Cor da linha do gr√°fico
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                fill: true,
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    ticks: { 
                        maxRotation: 45, 
                        minRotation: 45 
                    }
                },
                y: {
                    min: 6, // pH m√≠nimo
                    max: 8, // pH m√°ximo
                    ticks: {
                        stepSize: 0.1
                    }
                }
            }
        }
    });
}

// Chama a fun√ß√£o de carregamento ao iniciar
loadSpeciesDB().then(() => {
    renderAquariums(); // Renderiza os aqu√°rios ap√≥s carregar o banco de dados
    simulatePHReadings(); // Inicia as leituras de pH simuladas
});
// Fun√ß√£o para abrir o modal de imagem
function openImageModal(imageSrc) {
    const modal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage');
    modalImage.src = imageSrc; // Define a imagem do modal
    modal.style.display = "block"; // Exibe o modal
}
let aquariums = [];

// Fun√ß√£o para criar um aqu√°rio
function createAquarium() {
    const name = document.getElementById('aquariumNameInput').value;
    const volume = document.getElementById('aquariumVolumeInput').value;

    if (!name || !volume) {
        showCompatibilityModal("Por favor, insira o nome e a litragem do aqu√°rio.");
        return;
    }

    aquariums.push({
        name,
        volume: parseFloat(volume),
        species: [],
        currentPH: 7,
        phReadings: [], // Armazena as leituras de pH
        speciesVisible: false
    });

    renderAquariums();
    document.getElementById('aquariumNameInput').value = ''; // Limpa o campo de nome
    document.getElementById('aquariumVolumeInput').value = ''; // Limpa o campo de litragem
}

// Fun√ß√£o para renderizar aqu√°rios
function renderAquariums() {
    const container = document.getElementById('aquariumContainer');
    container.innerHTML = '';
    
    aquariums.forEach((aquarium, index) => {
        const aquariumDiv = document.createElement('div');
        aquariumDiv.className = 'aquarium';
        
        // Calcula o estado do aqu√°rio (pH e quantidade de peixes)
        const { color, message } = checkAquariumStatus(aquarium, index);
        
        // Aplica a cor ao aqu√°rio com base no estado
        aquariumDiv.style.backgroundColor = color;
        
        // Cabe√ßalho do aqu√°rio
        const header = document.createElement('div');
        header.className = 'aquarium-header';
        header.onclick = () => toggleSpeciesVisibility(index);
        
        const title = document.createElement('h2');
        title.textContent = `${aquarium.name} - ${aquarium.volume}L (pH: ${aquarium.currentPH})`;
        
        // Bot√£o de abrir gr√°fico
        const graphBtn = document.createElement('span');
        graphBtn.className = 'graph-icon';
        graphBtn.textContent = 'üìä';
        graphBtn.onclick = (e) => { 
            e.stopPropagation(); 
            openPHGraphModal(index); // Passa o √≠ndice do aqu√°rio
        };

        // Bot√£o de adicionar esp√©cie
        const addBtn = document.createElement('span');
        addBtn.className = 'add-icon';
        addBtn.textContent = '+';
        addBtn.onclick = (e) => { e.stopPropagation(); openSpeciesModal(index); };
        
        // Bot√£o de deletar aqu√°rio
        const deleteBtn = document.createElement('span');
        deleteBtn.className = 'delete-icon';
        deleteBtn.textContent = 'üóëÔ∏è';
        deleteBtn.onclick = (e) => { e.stopPropagation(); deleteAquarium(index); };
        
        header.appendChild(title);
        header.appendChild(graphBtn); // Bot√£o de gr√°fico
        header.appendChild(addBtn);
        header.appendChild(deleteBtn);
        
        // Exibe a mensagem de erro, se houver
        if (message) {
            const warningMessage = document.createElement('p');
            warningMessage.textContent = message;
            aquariumDiv.appendChild(warningMessage);
        }

        // Lista de esp√©cies
        const speciesList = document.createElement('ul');
        speciesList.className = 'species-list';
        speciesList.style.display = aquarium.speciesVisible ? 'block' : 'none';

        aquarium.species.forEach((species, speciesIndex) => {
            const speciesItem = document.createElement('li');
            speciesItem.className = 'species-item';
            speciesItem.innerHTML = ` 
                <img src="${species.image}" class="species-image" alt="${species.name}" onclick="openImageModal('${species.image}')">
                <strong>${species.name}</strong> - Quantidade: 
                <input type="number" min="1" value="${species.quantity}" onchange="updateQuantity(${index}, ${speciesIndex}, this.value)">
                <br>PH Ideal: ${species.idealPH}<br>Descri√ß√£o: ${species.description}<br>Comportamento: ${species.behavior}`;
            
            const removeBtn = document.createElement('span');
            removeBtn.className = 'delete-icon';
            removeBtn.textContent = 'üóëÔ∏è';
            removeBtn.onclick = () => removeSpecies(index, speciesIndex);

            speciesItem.appendChild(removeBtn);
            speciesList.appendChild(speciesItem);
        });
        
        aquariumDiv.appendChild(header);
        aquariumDiv.appendChild(speciesList);
        container.appendChild(aquariumDiv);
    });
}
// Fun√ß√£o para alternar a visibilidade das esp√©cies
function toggleSpeciesVisibility(index) {
    aquariums[index].speciesVisible = !aquariums[index].speciesVisible; // Altera o estado de visibilidade
    renderAquariums(); // Atualiza a renderiza√ß√£o
}

// Fun√ß√£o para exibir o modal de compatibilidade
function showCompatibilityModal(message) {
    const modal = document.getElementById("compatibilityModal");
    const compatibilityMessageContainer = modal.querySelector(".modal-compatibility");
    compatibilityMessageContainer.innerHTML =`
        <span class="close" onclick="closeModal('compatibilityModal')">&times;</span>
        <h2>Aviso</h2>
        <p>${message}</p>
    `;
    modal.style.display = "block"; // Exibe o modal de compatibilidade
}

// Fun√ß√£o para fechar o modal
function closeModal() {
    const modal = document.getElementById("compatibilityModal");
    modal.querySelector(".modal-compatibility").innerHTML = '<span class="close" onclick="closeModal()">&times;</span>';
    modal.style.display = "none";
}

// Fun√ß√£o para verificar compatibilidade e adicionar ou atualizar esp√©cies
function addOrUpdateSpecies(aquariumIndex, species) {
    const aquarium = aquariums[aquariumIndex];
    const incompatibleSpecies = aquarium.species.filter(s => s.name !== species.name && !s.compatibility.includes(species.name));

    if (incompatibleSpecies.length > 0) {
        const names = incompatibleSpecies.map(s => s.name).join(", ");
        const message = `A esp√©cie ${species.name} √© incompat√≠vel com ${names} j√° presentes no aqu√°rio.`;
        showCompatibilityModal(message);
        return;
    }

    // Atualiza a quantidade se a esp√©cie j√° existe ou adiciona uma nova esp√©cie
    const existingSpecies = aquarium.species.find(s => s.name === species.name);
    if (existingSpecies) {
        existingSpecies.quantity++;
    } else {
        aquarium.species.push({ ...species, quantity: 1 });
    }

    // Garante que a lista de esp√©cies do aqu√°rio fique vis√≠vel ap√≥s a adi√ß√£o
    aquarium.speciesVisible = true;

    renderAquariums();
}


// Fun√ß√£o para remover uma esp√©cie
function removeSpecies(aquariumIndex, speciesIndex) {
    aquariums[aquariumIndex].species.splice(speciesIndex, 1); // Remove a esp√©cie
    renderAquariums(); // Atualiza a renderiza√ß√£o
}

// Fun√ß√£o para atualizar a quantidade de esp√©cies
function updateQuantity(aquariumIndex, speciesIndex, quantity) {
    const newQuantity = Math.max(1, quantity); // Garantir que a quantidade seja pelo menos 1
    if (newQuantity !== aquariums[aquariumIndex].species[speciesIndex].quantity) {
        aquariums[aquariumIndex].species[speciesIndex].quantity = newQuantity; // Atualiza a quantidade
        renderAquariums(); // Atualiza a renderiza√ß√£o
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = "none";
        
        // Limpa o conte√∫do do aviso de compatibilidade
        if (modalId === "compatibilityModal") {
            const compatibilityMessageContainer = modal.querySelector(".modal-compatibility");
            compatibilityMessageContainer.innerHTML = '<span class="close" onclick="closeModal(\'compatibilityModal\')">&times;</span>';
        }
    }
}

// Evento para fechar o modal ao clicar fora dele
window.onclick = function(event) {
    const modals = ['speciesModal', 'imageModal', 'compatibilityModal'];
    
    modals.forEach((modalId) => {
        const modal = document.getElementById(modalId);
        if (event.target === modal) {
            closeModal(modalId); 
        }
    });
}


// Evento para fechar o modal ao pressionar a tecla 'Esc'
window.onkeydown = function(event) {
    if (event.key === "Escape") { // Verifica se a tecla pressionada √© 'Esc'
        closeModal(); // Fecha os modais
    }
};

// Uso nas fun√ß√µes de abertura do modal e adi√ß√£o de esp√©cies
function openSpeciesModal(aquariumIndex) {
    const modal = document.getElementById('speciesModal');
    const speciesList = document.getElementById('speciesList');
    speciesList.innerHTML = '';

    speciesDB.forEach(species => {
        const speciesItem = document.createElement('div');
        speciesItem.className = 'species-item';
        speciesItem.innerHTML = `<img src="${species.image}" class="species-image" alt="${species.name}"> <strong>${species.name}</strong> - ${species.description}`;
        
        const addButton = document.createElement('button');
        addButton.textContent = "Adicionar";
        addButton.onclick = () => {
            addOrUpdateSpecies(aquariumIndex, species); // Chama a fun√ß√£o de adi√ß√£o ou atualiza√ß√£o
            closeModal(); // Fecha o modal ap√≥s adicionar
        };

        speciesItem.appendChild(addButton);
        speciesList.appendChild(speciesItem);
    });

    modal.style.display = "block";
}


// Fun√ß√£o para excluir um aqu√°rio
function deleteAquarium(index) {
    aquariums.splice(index, 1); // Remove o aqu√°rio
    renderAquariums(); // Atualiza a renderiza√ß√£o
}

// Fun√ß√£o para verificar o estado do aqu√°rio (pH e n√∫mero de peixes)
function checkAquariumStatus(aquarium, index) {
    let color = "white"; // Cor inicial do aqu√°rio
    let textColor = "black"; // Cor inicial do texto
    let messages = []; // Armazena todas as mensagens de erro

    // Verifica√ß√£o do pH
    aquarium.species.forEach(species => {
        if (aquarium.currentPH < species.idealPH - 1 || aquarium.currentPH > species.idealPH + 1) {
            color = color === "white" ? "yellow" : color; // Amarelo se pH fora do ideal
            messages.push(" pH fora do ideal.");
        }
    });

    // Verifica√ß√£o da quantidade m√°xima de peixes
    let totalFish = 0;
    aquarium.species.forEach(species => {
        totalFish += species.quantity;
    });
    
    if (totalFish > aquarium.volume * 2) { // Supondo que cada litro possa ter at√© 2 peixes (ajuste conforme sua l√≥gica)
        color = color === "white" ? "red" : color; // Vermelho se ultrapassar o limite de peixes
        messages.push(" quantidade de peixes excede o limite.");
    }

    // Se tanto o pH quanto a quantidade de peixes estiverem errados, a cor ser√° preta
    if (color === "yellow" && totalFish > aquarium.volume * 2) {
        color = "red"; // Preto se ambos estiverem errados
        messages.push("Erro: pH e/ou quantidade de peixes fora dos limites!");
    }

    // Se houver mensagens, exibe o modal de compatibilidade com essas mensagens
    if (messages.length > 0) {
        showCompatibilityModal(messages.join(" "), textColor); // Passa a cor do texto para o modal
    }

    // Junta todas as mensagens de erro em uma s√≥
    const message = messages.join(" ");

    // Retorna a cor do aqu√°rio, a cor do texto e a mensagem
    return { color, textColor, message };
}


